WB part 7


IMP  EXAMPLE OF DESTRUCTURING 

return {...state,[tool]:{...[tool],stroke}};  // WRONG-> NOT able to simult UPDATE

THUS ->  const {tool,stroke} = action.payload;
            const newState = {...state};
            newState[tool].stroke=stroke;
            return newState;

---------------------------------------------

TOOLBOX PROVIDER

//each TOOL will have its own TOOLBOX

import React,{useReducer} from 'react'
import toolBoxContext from './toolbox-context'
import { COLORS, SIZE_TOOL_TYPES, TOOL_ITEMS, TOOLBOX_ACTIONS } from '../constants';

function toolboxReducer(state,action){
    switch (action.type){
        case TOOLBOX_ACTIONS.CHANGE_STROKE:{
            const {tool,stroke} = action.payload;
            return {...state,[tool]:{...[tool],stroke}};    // just updating the stroke of the tool in state
        }
        default :{
            return state;
        }
    }
}

const initialToolboxState = {
    [TOOL_ITEMS.LINE]:{
        stroke: COLORS.BLACK,
        size:1
    },
    [TOOL_ITEMS.RECTANGLE]:{
        stroke:COLORS.BLACK,
        fill:null,
        size:1,
    },
    [TOOL_ITEMS.CIRCLE]:{
        stroke:COLORS.BLACK,
        fill:null,
        size:1,
    },
    [TOOL_ITEMS.ARROW]:{
        stroke:COLORS.BLACK,
        size:1,
    }
}


function ToolboxProvider({children}) {
    const [toolboxState,dispatchtoolboxAction]=useReducer(toolboxReducer,initialToolboxState);

    function changeStrokeHandler (tool,stroke) {
        dispatchtoolboxAction({
            type:"CHANGE_STROKE",
            payload:{tool, stroke}
        })
    }


    const toolboxValue= {
        toolboxState,
        changeStrokeHandler,
    }
  return (
    <toolBoxContext.Provider value= {toolboxValue}>
        {children}
    </toolBoxContext.Provider>
  )
}

export default ToolboxProvider



toolbox-context


import {createContext} from "react";

const toolBoxContext = createContext({
    toolboxState:{},
    changeStrokeHandler:()=>{},
    

});

export default toolBoxContext;



TOOL BOX index.js


import React,{useContext} from 'react'
import classes from "./index.module.css"
import cx from "classnames"
import { COLORS } from '../../constants'
import toolBoxContext from '../../store/toolbox-context'
import boardContext from '../../store/board-context'

function Toolbox() {

    const {activeToolItem} = useContext(boardContext)
    const {toolboxState,changeStrokeHandler} = useContext(toolBoxContext)

    const strokeColor= toolboxState[activeToolItem]?.stroke; // ? -> if it does not exist
  return (
    <div className={classes.container}>
        <div className={classes.selectOptionContainer}>
            <div className={classes.toolBoxLabel}>Stroke</div>
                {Object.keys(COLORS).map((idx)=> {
                    return <div className={cx(classes.colorBox,{[classes.activeColorBox]:strokeColor===COLORS[idx]})} 
                    style={{backgroundColor:COLORS[idx]}}
                    onClick = {() => changeStrokeHandler(activeToolItem,COLORS[idx])}
                    ></div>
                })
                }
            
        </div>
    </div>
  )
}
    //Iterating through all the COLOR Object and printing it as an option in the toolBOX
export default Toolbox



Tailwind bhaijaan in the same index.js of toolbox

.container {
    @apply absolute top-1/2 left-5 text-sm border border-gray-400;
    transform: translateY(-50%);
    box-shadow: 1px 0 10px rgba(0, 0, 0, 0.2);
  }
  
  .selectOptionContainer {
    @apply mb-6 last:mb-0 first:pt-5 last:pb-5 px-4;
  }
  
  .toolBoxLabel {
    @apply block mb-1;
  }
  
  .colorsContainer {
    @apply flex flex-wrap items-center;
  }
  
  .colorBox {
    @apply inline-block w-5 h-5 rounded mr-1 last:mr-0;
  }
  
  .noFillColorBox {
    background: linear-gradient(
        to top left,
        rgba(255, 0, 0, 0) 0%,
        rgba(255, 0, 0, 0) calc(50% - 0.8px),
        rgba(255, 0, 0, 1) 50%,
        rgba(255, 0, 0, 0) calc(50% + 0.8px),
        rgba(255, 0, 0, 0) 100%
      ),
      linear-gradient(
        to top right,
        rgba(255, 0, 0, 0) 0%,
        rgba(255, 0, 0, 0) calc(50% - 0.8px),
        rgba(255, 0, 0, 1) 50%,
        rgba(255, 0, 0, 0) calc(50% + 0.8px),
        rgba(255, 0, 0, 0) 100%
      );
  }
  
  .activeColorBox {
    @apply border border-gray-300;
    box-shadow: 0 0 0 1px #4a47b1;
  }
  
  .colorPicker {
    @apply mr-5 w-10 h-10 rounded border-2 border-neutral-400;
  }