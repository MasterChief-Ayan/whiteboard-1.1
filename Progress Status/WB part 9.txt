WB part 9


add brush option in initialToolboxState

//each TOOL will have its own TOOLBOX

import React,{useReducer} from 'react'
import toolBoxContext from './toolbox-context'
import { COLORS, SIZE_TOOL_TYPES, TOOL_ITEMS, TOOLBOX_ACTIONS } from '../constants';

function toolboxReducer(state,action){
    switch (action.type){
        case TOOLBOX_ACTIONS.CHANGE_STROKE:{
            const {tool,stroke} = action.payload;
            const newState = {...state};
            newState[tool].stroke=stroke;
            return newState;    // just updating the stroke of the tool in state
        }
        case TOOLBOX_ACTIONS.CHANGE_FILL:{
            const {tool,fill} = action.payload;
            const newState = {...state};
            newState[tool].fill=fill;
            return newState;    // just updating the stroke of the tool in state
        }
        case TOOLBOX_ACTIONS.CHANGE_SIZE:{
            const {tool,size} = action.payload;
            const newState = {...state};
            newState[tool].size=size;
            return newState;    // just updating the stroke of the tool in state
        }
        default :{
            return state;
        }
    }
}

const initialToolboxState = {
    [TOOL_ITEMS.BRUSH]:{
        stroke:COLORS.BLACK,
    },
    [TOOL_ITEMS.LINE]:{
        stroke: COLORS.BLACK,
        size:1
    },
    [TOOL_ITEMS.RECTANGLE]:{
        stroke:COLORS.BLACK,
        fill:null,
        size:1,
    },
    [TOOL_ITEMS.CIRCLE]:{
        stroke:COLORS.BLACK,
        fill:null,
        size:1,
    },
    [TOOL_ITEMS.ARROW]:{
        stroke:COLORS.BLACK,
        size:1,
    },
    
}


function ToolboxProvider({children}) {
    const [toolboxState,dispatchtoolboxAction]=useReducer(toolboxReducer,initialToolboxState);

    function changeStrokeHandler (tool,stroke) {
        dispatchtoolboxAction({
            type:TOOLBOX_ACTIONS.CHANGE_STROKE,
            payload:{tool, stroke}
        })
    }

    function changeFillHandler (tool,fill) {
        dispatchtoolboxAction({
            type:TOOLBOX_ACTIONS.CHANGE_FILL,
            payload:{tool, fill}
        })
    }
    function changeSizeHandler (tool,size) {
        dispatchtoolboxAction({
            type:TOOLBOX_ACTIONS.CHANGE_SIZE, //By mistakenly written "type:TOOLBOX_ACTIONS.CHANGE_FILL"
            payload:{tool, size}
        })
    }


    const toolboxValue= {
        toolboxState,
        changeStrokeHandler,
        changeFillHandler,
        changeSizeHandler,
    }
  return (
    <toolBoxContext.Provider value= {toolboxValue}>
        {children}
    </toolBoxContext.Provider>
  )
}

export default ToolboxProvider







ADD switch case for the type of elemetns and return accordingly





import { BOARD_ACTIONS, TOOL_ITEMS } from "../constants";
import rough from "roughjs/bin/rough"
import getStroke from "perfect-freehand"

const gen = rough.generator();

function createRoughElement(id,x1,y1,x2,y2,{type,stroke,fill,size}) {
  const element ={id,x1,y1,x2,y2,type,fill,stroke,size};

  let options ={
    seed: id+1, // id must be +VE , avoid error in rough
    fillStyle: "solid", // OTHERS : hachure(default), solid, zigzag, cross-hatch, dots, sunburst, dashed, or zigzag-line
    
}

if (stroke) {
  options.stroke = stroke;
}
if (fill){
  options.fill = fill;
}
if (size){
  options.strokeWidth = size;
}

  switch (type){
      case TOOL_ITEMS.BRUSH:{
        // Initially when the mouse is pressed down, just single point in SVG PATH
        const brushElement={
          id,
          points:[{x:x1,y:y1}],
          path: new Path2D(getSvgPathFromStroke(getStroke([{x:x1,y:y1}]))),
          type,
          stroke,
        }
        return brushElement;
      }
      case TOOL_ITEMS.LINE:{
        element.roughEle = gen.line(x1,y1,x2,y2,options); //start_x,start_y,end_x,end_y
        return element;
      }
      case TOOL_ITEMS.RECTANGLE:{
        element.roughEle = gen.rectangle(x1,y1,x2-x1,y2-y1,options);//start_x,start_y,width,height
        return element;
      }
      case TOOL_ITEMS.CIRCLE:{
        element.roughEle = gen.ellipse((x1+x2)*0.5,(y1+y2)*0.5,x2-x1,y2-y1,options);// center_X,center_Y,width,height
        return element;
      }
      case TOOL_ITEMS.ARROW:{
        const theta = Math.atan2(y2-y1,x2-x1);
        const phi = (20) * (Math.PI/180);
        const len = 20;

        const alpha = (Math.PI/2)-theta-phi;
        const beta = theta-phi;

        const leftPoint = [x2-(len*Math.cos(beta)),y2-(len*Math.sin(beta))];
        const rightPoint = [x2-(len*Math.sin(alpha)),y2-(len*Math.cos(alpha))];

        // SEE the ARROW_DERIVATION.PNG for VARIABLE NAMING

        element.roughEle = gen.linearPath([[x1,y1],[x2,y2],leftPoint,[x2,y2],rightPoint,[x2,y2]]); // as its like drawing a arrow with pen without lifiting the pen tip, thus start, end, left,end, right, end (i again went to end at the last just to make sure the arrow density/thickness)
        return element;
      }
      default:
        return element;
  }
}

export const getSvgPathFromStroke= (stroke)=> {
  if (!stroke.length) return ''
                  // acc -> accumulator
  const d = stroke.reduce(
    (acc, [x0, y0], i, arr) => {
      const [x1, y1] = arr[(i + 1) % arr.length]
      acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2)
      return acc
    },
    ['M', ...stroke[0], 'Q']
  )

  d.push('Z')
  return d.join(' ')
}

export default createRoughElement










UPDATE THE MOUSEMOVE IN THE REDUCER FOR BRUSH ACCORDINGLY


// CONCERNED WITH DRAWING but not concerned with what to draw

import React,{useState,useReducer} from 'react'
import boardContext from './board-context'
import { BOARD_ACTIONS, TOOL_ACTION_TYPES, TOOL_ITEMS } from '../constants'
import rough from "roughjs/bin/rough"
import createRoughElement, { getSvgPathFromStroke } from '../utilities/ElementManager';
import getStroke from 'perfect-freehand';

const gen = rough.generator();// to generate all the relevent shapes as specified

function  boardReducer (state,action) {
    switch (action.type){
        case BOARD_ACTIONS.CHANGE_TOOL:
            return {...state,activeToolItem: action.payload.tool,};

        case BOARD_ACTIONS.DRAW_DOWN:{
            const {clientX,clientY,stroke,fill,size} = action.payload;

            const newElement = createRoughElement(state.elements.length,clientX,clientY,clientX,clientY,{type:state.activeToolItem,stroke,fill,size});  // DONT USE BOARD_ACTIONS.DRAW_DOWN
            return {...state, toolActionType:TOOL_ACTION_TYPES.DRAWING, elements:[...state.elements,newElement]} // prev state + prev elements+ NEW ELEMENTS
        }
            
        case BOARD_ACTIONS.DRAW_MOVE:{
            const {clientX,clientY,stroke,fill,size} = action.payload;

            const pos=state.elements.length-1;
            const newElements=[...state.elements];
            const {id,x1,y1,x2,y2,type} = newElements[pos];
            // newElements[pos].x2=clientX; // NOT NEEDED ANY MORE DUE TO ELEMENT MANAGER (NNAM)
            // newElements[pos].y2=clientY; // (NNAM)
            // // newElements[pos].roughEle= gen.line(newElements[pos].x1,newElements[pos].y1,newElements[pos].x2,newElements[pos].y2);  // WRONG as the REAL TIM position is from the clientX and clientY // (NNAM)
            // newElements[pos].roughEle= gen.line(x1,y1,clientX,clientY);// (NNAM) 

            switch(type){
                case (TOOL_ITEMS.LINE):
                case (TOOL_ITEMS.RECTANGLE):
                case (TOOL_ITEMS.CIRCLE):
                case (TOOL_ITEMS.ARROW):
                    const newElement = createRoughElement(pos,x1,y1,clientX,clientY,{type:state.activeToolItem,stroke,fill,size});
                    newElements[pos]=newElement;
                    break; 
                case (TOOL_ITEMS.BRUSH):
                    // INSERTING EACH POINT 
                    newElements[pos].points=[...newElements[pos].points,{x:clientX,y:clientY}];
                    newElements[pos].path = new Path2D(getSvgPathFromStroke(getStroke(newElements[pos].points)));
                    //HERE when moving, ELEMENT MANAGER IS NOT CALLED
                    break;
                default:
                    break;
            }

            return {...state,elements:newElements};
        }
        case BOARD_ACTIONS.DRAW_UP:{
            return {...state, toolActionType:TOOL_ACTION_TYPES.NONE}
        }
            
        default:
            return state;
    }
}

const initialBoardState = {
    activeToolItem: TOOL_ITEMS.BRUSH,
    toolActionType: TOOL_ACTION_TYPES.NONE, // to know what action is going on now
    elements:[]
}

function BoardProvider({children}) {


    const [boardState,dispatchBoardAction] = useReducer(boardReducer,initialBoardState);
    function changeToolHandler(tool){
        dispatchBoardAction({type:"CHANGE_TOOL", payload:{tool}})
    }

    function boardMouseDownHandler (event,toolboxState) {
        const {clientX,clientY} = event;
        dispatchBoardAction({type: "DRAW_DOWN",
            payload: { 
                clientX,
                clientY,
                stroke: toolboxState[boardState.activeToolItem]?.stroke,
                fill: toolboxState[boardState.activeToolItem]?.fill,
                size: toolboxState[boardState.activeToolItem]?.size,
            }});
    }
    function boardMouseMoveHandler (event,toolboxState) {
        const {clientX,clientY} = event;
        dispatchBoardAction({type: "DRAW_MOVE",
            payload: { 
                clientX,
                clientY,
                stroke: toolboxState[boardState.activeToolItem]?.stroke,
                fill: toolboxState[boardState.activeToolItem]?.fill,
                size: toolboxState[boardState.activeToolItem]?.size,
            }});
    }
    function boardMouseUpHandler () {
        dispatchBoardAction({type: "DRAW_UP"}); // Just need to remove the STATUS of Action type
    }

    const boardValues={
        activeToolItem: boardState.activeToolItem,
        elements:boardState.elements,
        toolActionType:boardState.toolActionType,
        changeToolHandler,
        boardMouseDownHandler,
        boardMouseMoveHandler,
        boardMouseUpHandler,
    }

    
  return (
    <boardContext.Provider value = {boardValues}>
        {children}
    </boardContext.Provider>
  )
}

export default BoardProvider


UPDATE INDEX FOR BOARD AS EACH POINTS OF BRUSH MUS REDEREND WHEN ADDED NEWLY RIGHT?



import React,{useRef,useEffect,useContext,useLayoutEffect} from 'react' 
import "./index.module.css"
import rough from "roughjs"
import boardContext from '../../store/board-context';
import { TOOL_ACTION_TYPES, TOOL_ITEMS, TOOLBOX_ACTIONS } from '../../constants';
import Toolbox from '../Toolbox';
import toolBoxContext from '../../store/toolbox-context';

function Board() {
    const canvasRef = useRef();
    const {elements,boardMouseDownHandler,boardMouseMoveHandler,boardMouseUpHandler,toolActionType,activeToolItem} = useContext(boardContext) //Keep on importing each func from context

    const {toolboxState} = useContext(toolBoxContext);

    useEffect(() => {
      const canvas = canvasRef.current;
      canvas.height = window.innerHeight; // entire vw
      canvas.width = window.innerWidth;   // entire vh
    }, []);

    useLayoutEffect(() => {
        const canvas = canvasRef.current;
        const context = canvas.getContext("2d");
        const roughCanvas = rough.canvas(canvas); // canvas <---> getelementbyid
        const generator = roughCanvas.generator;  // Generator -> easy draw in canvas

        elements.forEach((element) => {

          switch (element.type) {
            case TOOL_ITEMS.LINE:
            case TOOL_ITEMS.RECTANGLE:
            case TOOL_ITEMS.CIRCLE:
            case TOOL_ITEMS.ARROW:
              roughCanvas.draw(element.roughEle)  // drawing all the existing elements
              break;
            case TOOL_ITEMS.BRUSH:  
              //as each points is added, RE-RENDERING TAKES PLACE
              context.fillStyle=element.stroke;
              context.fill(element.path);
              context.restore();
              break;          
            default:
              throw new Error("Kaisa type Select kar rahe ho tum?");
          }
          
        })

        // WHEN ELEMENTS CHANGE, We want THE BOARD RE-RENDERS

        return () => {
          context.clearRect(0,0,canvas.width,canvas.height); // TO clr RECTANGLE(aka White Board)
        }


        // let rect1 = generator.rectangle(10, 10, 100, 100);  // (x.start,y.start,length,height)
        // let rect2 = generator.rectangle(10, 120, 100, 100, {fill: 'black',stroke:'red'});
        // roughCanvas.draw(rect1);
        // roughCanvas.draw(rect2);
/*
        By default it takes the available size in the parent Div
        const context = canvas.getContext("2d");
        context.fillStyle = "#FF0000"; // or even like "blue"
        context.fillRect(0,0,150,150);  // (x.start,y.start,length,height)
*/
        
    }, [elements]);

    function handleMouseDown (event) {
      // const clientX = event.clientX;       // X-Pos of MOUSE-CLICK
      // const clientY = event.clientY-59;    // Y-Pos of MOUSE-CLICK
      event.clientY-=60;          // OFF-SET Y-PIXEL due to NAVBAR at the top
      if(activeToolItem != TOOL_ITEMS.NONE) boardMouseDownHandler(event,toolboxState); 
    }

    function handleMouseMove(event){
      event.clientY-=60; // OFF-SET Y-PIXEL due to NAVBAR at the top
      if(toolActionType == TOOL_ACTION_TYPES.DRAWING)boardMouseMoveHandler(event,toolboxState);   //needs the coordinates as user, is holding and moving the cursor
    }

    function handleMouseUp () {
      if(activeToolItem != TOOL_ITEMS.NONE) boardMouseUpHandler(); // No need of event as just o set the toolActionType===NONE
    }


  return (
    <div>
        <canvas ref={canvasRef} className="canvas" onMouseDown ={handleMouseDown}
        onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}></canvas>
    </div>
  )
}

export default Board;

