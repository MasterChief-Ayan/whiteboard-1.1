WB part 10

Quite a few changes considering the changing the type of action and due to the introduction of ERASER tool

isPointerNearElement n ELEMENT MANAGER

import { TOOL_ITEMS } from "../constants";
import rough from "roughjs/bin/rough"
import getStroke from "perfect-freehand"

const gen = rough.generator();

function createRoughElement(id,x1,y1,x2,y2,{type,stroke,fill,size}) {
  const element ={id,x1,y1,x2,y2,type,fill,stroke,size};

  let options ={
    seed: id+1, // id must be +VE , avoid error in rough
    fillStyle: "solid", // OTHERS : hachure(default), solid, zigzag, cross-hatch, dots, sunburst, dashed, or zigzag-line
    
}

if (stroke) {
  options.stroke = stroke;
}
if (fill){
  options.fill = fill;
}
if (size){
  options.strokeWidth = size;
}

  switch (type){
      case TOOL_ITEMS.BRUSH:{
        // Initially when the mouse is pressed down, just single point in SVG PATH
        const brushElement={
          id,
          points:[{x:x1,y:y1}],
          path: new Path2D(getSvgPathFromStroke(getStroke([{x:x1,y:y1}]))),
          type,
          stroke,
        }
        return brushElement;
      }
      case TOOL_ITEMS.LINE:{
        element.roughEle = gen.line(x1,y1,x2,y2,options); //start_x,start_y,end_x,end_y
        return element;
      }
      case TOOL_ITEMS.RECTANGLE:{
        element.roughEle = gen.rectangle(x1,y1,x2-x1,y2-y1,options);//start_x,start_y,width,height
        return element;
      }
      case TOOL_ITEMS.CIRCLE:{
        element.roughEle = gen.ellipse((x1+x2)*0.5,(y1+y2)*0.5,x2-x1,y2-y1,options);// center_X,center_Y,width,height
        return element;
      }
      case TOOL_ITEMS.ARROW:{
        const theta = Math.atan2(y2-y1,x2-x1);
        const phi = (20) * (Math.PI/180);
        const len = 20;

        const alpha = (Math.PI/2)-theta-phi;
        const beta = theta-phi;

        const leftPoint = [x2-(len*Math.cos(beta)),y2-(len*Math.sin(beta))];
        const rightPoint = [x2-(len*Math.sin(alpha)),y2-(len*Math.cos(alpha))];

        // SEE the ARROW_DERIVATION.PNG for VARIABLE NAMING

        element.roughEle = gen.linearPath([[x1,y1],[x2,y2],leftPoint,[x2,y2],rightPoint,[x2,y2]]); // as its like drawing a arrow with pen without lifiting the pen tip, thus start, end, left,end, right, end (i again went to end at the last just to make sure the arrow density/thickness)
        return element;
      }
      default:
        return element;
  }
}

export const isPointerNearElement = (element,clientX,clientY) => {
  return false;
}

export const getSvgPathFromStroke= (stroke)=> {
  if (!stroke.length) return ''
                  // acc -> accumulator
  const d = stroke.reduce(
    (acc, [x0, y0], i, arr) => {
      const [x1, y1] = arr[(i + 1) % arr.length]
      acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2)
      return acc
    },
    ['M', ...stroke[0], 'Q']
  )

  d.push('Z')
  return d.join(' ')
}

export default createRoughElement




BOARDPROVIDER
-reducer (+2 -> change action type & -> erase)
-few changes in the function for mouse down,up


// CONCERNED WITH DRAWING but not concerned with what to draw

import React,{useReducer} from 'react'
import boardContext from './board-context'
import { BOARD_ACTIONS, TOOL_ACTION_TYPES, TOOL_ITEMS } from '../constants'
// import rough from "roughjs/bin/rough"
import createRoughElement, { getSvgPathFromStroke, isPointerNearElement } from '../utilities/ElementManager';
import getStroke from 'perfect-freehand';

// const gen = rough.generator();// to generate all the relevent shapes as specified

function  boardReducer (state,action) {
    switch (action.type){
        case BOARD_ACTIONS.CHANGE_TOOL:
            return {...state,activeToolItem: action.payload.tool,};
        case BOARD_ACTIONS.CHANGE_ACTION_TYPE:
            return {...state,toolActionType:action.payload.actionType};

        case BOARD_ACTIONS.DRAW_DOWN:{
            const {clientX,clientY,stroke,fill,size} = action.payload;

            const newElement = createRoughElement(state.elements.length,clientX,clientY,clientX,clientY,{type:state.activeToolItem,stroke,fill,size});  // DONT USE BOARD_ACTIONS.DRAW_DOWN
            return {...state, 
                toolActionType:(state.activeToolItem=TOOL_ACTION_TYPES.DRAWING), 
                elements:[...state.elements,newElement]} // prev state + prev elements+ NEW ELEMENTS
        }
            
        case BOARD_ACTIONS.DRAW_MOVE:{
            const {clientX,clientY,stroke,fill,size} = action.payload;

            const pos=state.elements.length-1;
            const newElements=[...state.elements];
            const {x1,y1,type} = newElements[pos];
            // newElements[pos].x2=clientX; // NOT NEEDED ANY MORE DUE TO ELEMENT MANAGER (NNAM)
            // newElements[pos].y2=clientY; // (NNAM)
            // // newElements[pos].roughEle= gen.line(newElements[pos].x1,newElements[pos].y1,newElements[pos].x2,newElements[pos].y2);  // WRONG as the REAL TIM position is from the clientX and clientY // (NNAM)
            // newElements[pos].roughEle= gen.line(x1,y1,clientX,clientY);// (NNAM) 

            switch(type){
                case (TOOL_ITEMS.LINE):
                case (TOOL_ITEMS.RECTANGLE):
                case (TOOL_ITEMS.CIRCLE):
                case (TOOL_ITEMS.ARROW):
                    const newElement = createRoughElement(pos,x1,y1,clientX,clientY,{type:state.activeToolItem,stroke,fill,size});
                    newElements[pos]=newElement;
                    break; 
                case (TOOL_ITEMS.BRUSH):
                    // INSERTING EACH POINT 
                    newElements[pos].points=[...newElements[pos].points,{x:clientX,y:clientY}];
                    newElements[pos].path = new Path2D(getSvgPathFromStroke(getStroke(newElements[pos].points)));
                    //HERE when moving, ELEMENT MANAGER IS NOT CALLED
                    break;
                default:
                    break;
            }

            return {...state,elements:newElements};
        }
        case BOARD_ACTIONS.DRAW_UP:{
            return {...state, toolActionType:TOOL_ACTION_TYPES.NONE}
        }
        case BOARD_ACTIONS.ERASE:{
            const {clientX,clientY} = action.payload;
            let newElements = [...state.elements];      // assignment thus "let" and not "const"

            //if Point is close to a element, then dont take it as its supposed to be deleted
            newElements = newElements.filter((element) => {
                return !isPointerNearElement(element,clientX,clientY);
            })
            return {...state,elements:newElements}
        }
            
        default:
            return state;
    }
}

const initialBoardState = {
    activeToolItem: TOOL_ITEMS.BRUSH,
    toolActionType: TOOL_ACTION_TYPES.NONE, // to know what action is going on now
    elements:[]
}

function BoardProvider({children}) {


    const [boardState,dispatchBoardAction] = useReducer(boardReducer,initialBoardState);
    function changeToolHandler(tool){
        dispatchBoardAction({type:BOARD_ACTIONS.CHANGE_TOOL, payload:{tool}})
    }

    function boardMouseDownHandler (event,toolboxState) {
        const {clientX,clientY} = event;
        if(boardState.activeToolItem === TOOL_ITEMS.ERASER){
            // informing to make the active action type as erasing
            dispatchBoardAction({
                type: BOARD_ACTIONS.CHANGE_ACTION_TYPE,
                payload:{actionType:TOOL_ACTION_TYPES.ERASING}
            })
            return;
        }
        dispatchBoardAction({type: BOARD_ACTIONS.DRAW_DOWN,
            payload: { 
                clientX,
                clientY,
                stroke: toolboxState[boardState.activeToolItem]?.stroke,
                fill: toolboxState[boardState.activeToolItem]?.fill,
                size: toolboxState[boardState.activeToolItem]?.size,
            }});
    }
    function boardMouseMoveHandler (event,toolboxState) {
        const {clientX,clientY} = event;
        if(boardState.toolActionType === TOOL_ACTION_TYPES.DRAWING){
            dispatchBoardAction({type: BOARD_ACTIONS.DRAW_MOVE,
                payload: { 
                    clientX,
                    clientY,
                    stroke: toolboxState[boardState.activeToolItem]?.stroke,
                    fill: toolboxState[boardState.activeToolItem]?.fill,
                    size: toolboxState[boardState.activeToolItem]?.size,
                }});
        }
        else if(boardState.toolActionType === TOOL_ACTION_TYPES.ERASING){    // to identify the pos of erasor when mosue is down and moving
            dispatchBoardAction({type: BOARD_ACTIONS.ERASE,
                payload: { 
                    clientX,
                    clientY,
                }});
        }
        
    }
    function boardMouseUpHandler () {
        dispatchBoardAction({type: BOARD_ACTIONS.CHANGE_ACTION_TYPE, payload:{actionType:TOOL_ACTION_TYPES.NONE}}); // CHanging the Status of action to NONE
    }

    const boardValues={
        activeToolItem: boardState.activeToolItem,
        elements:boardState.elements,
        toolActionType:boardState.toolActionType,
        changeToolHandler,
        boardMouseDownHandler,
        boardMouseMoveHandler,
        boardMouseUpHandler,
    }

    
  return (
    <boardContext.Provider value = {boardValues}>
        {children}
    </boardContext.Provider>
  )
}

export default BoardProvider

